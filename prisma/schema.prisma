// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id             String           @id @default(cuid())
  name           String
  address        Json             // { street, city, state, zip, country }
  coordinates    Json?            // { latitude, longitude }
  contact        Json?            // { name, email, phone }
  status         LocationStatus   @default(ACTIVE)
  source         LocationSource   @default(MANUAL)
  salesChannel   String?
  dealOwner      String?
  expirationDate DateTime?
  archiveReason  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  archivedAt     DateTime?
  metadata       Json?            // Additional data

  // Relations
  locationProducts LocationProduct[]
  locationHistory  LocationHistory[]

  @@index([status])
  @@index([source])
  @@index([expirationDate])
  @@index([createdAt])
}

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  url         String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  locationProducts LocationProduct[]

  @@index([category])
  @@index([isActive])
}

model LocationProduct {
  id         String   @id @default(cuid())
  locationId String
  productId  String
  createdAt  DateTime @default(now())

  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([locationId, productId])
}

model LocationHistory {
  id         String   @id @default(cuid())
  locationId String
  action     String   // CREATE, UPDATE, ARCHIVE, etc.
  changes    Json?    // What changed
  userId     String?
  createdAt  DateTime @default(now())

  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UpdateLog {
  id          String   @id @default(cuid())
  type        String   // SHOPIFY_SYNC, MANUAL_UPDATE, etc.
  status      String   // SUCCESS, ERROR, PENDING
  details     Json?
  error       String?
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum UserRole {
  ADMIN
  MANAGER
  VIEWER
}

enum LocationStatus {
  ACTIVE
  ARCHIVED
  EXPIRED
}

enum LocationSource {
  MANUAL
  SHOPIFY
} 